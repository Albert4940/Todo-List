{"ast":null,"code":"var _jsxFileName = \"E:\\\\REACT_LINKEDIN\\\\exo\\\\to-do-list\\\\src\\\\components\\\\App.js\";\nimport React from 'react';\nimport NavBar from './NavBar';\nimport ToDoList from './ToDoList';\nimport AddTask from './AddTask';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport initialData from '../initialData';\nimport uniqueid from 'uniqueid';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tasks: initialData\n    };\n\n    this.onToggleCompleted = taskId => {\n      let taskToUpdate = this.state.tasks.find(task => task.id === taskId);\n      taskToUpdate.completed = !taskToUpdate.completed;\n      this.setState(prevState => {\n        prevState.tasks.map(task => {\n          return task.id === taskId ? taskToUpdate : task;\n        });\n      });\n    };\n\n    this.onAddTask = newTaskName => {\n      let newTask = {\n        id: uniqueid(),\n        name: newTaskName,\n        completed: false\n      };\n      this.setState(prevState => ({\n        tasks: [...prevState.tasks, newTask]\n      }));\n    };\n\n    this.onDeleteCompleted = () => {\n      this.setState(prevState => {\n        let newState = prevState.tasks.filter(task => !task.completed);\n        return {\n          tasks: newState\n        };\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      id: \"todo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(BrowserRouter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/add-task\",\n      render: props => React.createElement(AddTask, Object.assign({}, props, {\n        onAddTask: this.onAddTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/:filter?\",\n      render: props => React.createElement(ToDoList, Object.assign({}, props, {\n        tasks: this.state.tasks,\n        onToggleCompleted: this.onToggleCompleted,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    })), React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["E:\\REACT_LINKEDIN\\exo\\to-do-list\\src\\components\\App.js"],"names":["React","NavBar","ToDoList","AddTask","BrowserRouter","Switch","Route","initialData","uniqueid","App","Component","state","tasks","onToggleCompleted","taskId","taskToUpdate","find","task","id","completed","setState","prevState","map","onAddTask","newTaskName","newTask","name","onDeleteCompleted","newState","filter","render","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,aAAR,EAAuBC,MAAvB,EAA+BC,KAA/B,QAA2C,kBAA3C;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AACA,MAAMC,GAAN,SAAkBT,KAAK,CAACU,SAAxB,CAAiC;AAAA;AAAA;AAAA,SAC7BC,KAD6B,GACrB;AACJC,MAAAA,KAAK,EAAEL;AADH,KADqB;;AAAA,SAK7BM,iBAL6B,GAKRC,MAAD,IAAY;AAC5B,UAAIC,YAAY,GAAG,KAAKJ,KAAL,CAAWC,KAAX,CAAiBI,IAAjB,CAAsBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,MAA1C,CAAnB;AACAC,MAAAA,YAAY,CAACI,SAAb,GAAyB,CAACJ,YAAY,CAACI,SAAvC;AAEA,WAAKC,QAAL,CAAcC,SAAS,IAAI;AACvBA,QAAAA,SAAS,CAACT,KAAV,CAAgBU,GAAhB,CAAoBL,IAAI,IAAI;AACxB,iBAAOA,IAAI,CAACC,EAAL,KAAYJ,MAAZ,GAAqBC,YAArB,GAAoCE,IAA3C;AACH,SAFD;AAGH,OAJD;AAKH,KAd4B;;AAAA,SAgB7BM,SAhB6B,GAgBhBC,WAAD,IAAe;AACvB,UAAIC,OAAO,GAAG;AACVP,QAAAA,EAAE,EAAEV,QAAQ,EADF;AAEVkB,QAAAA,IAAI,EAAEF,WAFI;AAGVL,QAAAA,SAAS,EAAC;AAHA,OAAd;AAMA,WAAKC,QAAL,CAAcC,SAAS,KAAI;AACvBT,QAAAA,KAAK,EAAC,CAAC,GAAGS,SAAS,CAACT,KAAd,EAAqBa,OAArB;AADiB,OAAJ,CAAvB;AAIH,KA3B4B;;AAAA,SA6B7BE,iBA7B6B,GA6BT,MAAM;AACvB,WAAKP,QAAL,CAAcC,SAAS,IAAI;AACvB,YAAIO,QAAQ,GAAGP,SAAS,CAACT,KAAV,CAAgBiB,MAAhB,CAAuBZ,IAAI,IAAI,CAACA,IAAI,CAACE,SAArC,CAAf;AACA,eAAO;AACHP,UAAAA,KAAK,EAAEgB;AADJ,SAAP;AAGH,OALD;AAMF,KApC4B;AAAA;;AAqC7BE,EAAAA,MAAM,GAAE;AACJ,WACI;AAAS,MAAA,EAAE,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,WAAZ;AAAwB,MAAA,MAAM,EAAGC,KAAD,IAAW,oBAAC,OAAD,oBAAaA,KAAb;AAAoB,QAAA,SAAS,EAAE,KAAKR,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,WAAZ;AAAwB,MAAA,MAAM,EAAGQ,KAAD,IAAW,oBAAC,QAAD,oBAAcA,KAAd;AAAqB,QAAA,KAAK,EAAE,KAAKpB,KAAL,CAAWC,KAAvC;AAA8C,QAAA,iBAAiB,EAAE,KAAKC,iBAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,EAKI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ,CADJ;AAWH;;AAjD4B;;AAoDjC,eAAeJ,GAAf","sourcesContent":["import React from 'react'\nimport NavBar from './NavBar'\nimport ToDoList from './ToDoList'\nimport AddTask from './AddTask'\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport initialData from '../initialData'\nimport uniqueid from 'uniqueid'\nclass App extends React.Component{\n    state = {\n        tasks: initialData\n    }\n\n    onToggleCompleted = (taskId) => {\n        let taskToUpdate = this.state.tasks.find(task => task.id === taskId)\n        taskToUpdate.completed = !taskToUpdate.completed\n        \n        this.setState(prevState => {\n            prevState.tasks.map(task => {\n                return task.id === taskId ? taskToUpdate : task\n            })\n        })\n    }\n\n    onAddTask = (newTaskName)=>{\n        let newTask = {\n            id: uniqueid(),\n            name: newTaskName,\n            completed:false\n        }\n\n        this.setState(prevState =>({\n            tasks:[...prevState.tasks, newTask]\n        }) )\n\n    }\n\n    onDeleteCompleted = () => {\n       this.setState(prevState => {\n           let newState = prevState.tasks.filter(task => !task.completed)\n           return {\n               tasks: newState\n           }\n       }) \n    }\n    render(){\n        return(\n            <section id=\"todo\">\n                <BrowserRouter>\n                    <Switch>\n                        <Route path=\"/add-task\" render={(props) => <AddTask {...props} onAddTask={this.onAddTask}/>} />\n                        <Route path=\"/:filter?\" render={(props) => <ToDoList {...props} tasks={this.state.tasks} onToggleCompleted={this.onToggleCompleted}/>} />\n                    </Switch>\n                    <NavBar />\n                </BrowserRouter>\n            </section>\n        )\n    }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}