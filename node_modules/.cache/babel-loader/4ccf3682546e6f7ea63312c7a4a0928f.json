{"ast":null,"code":"var _jsxFileName = \"E:\\\\REACT_LINKEDIN\\\\exo\\\\to-do-list\\\\src\\\\components\\\\App.js\";\nimport React from 'react';\nimport NavBar from './NavBar';\nimport ToDoList from './ToDoList';\nimport AddTask from './AddTask';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport initialData from '../initialData';\nimport uniqueid from 'uniqueid';\nimport Fetching from './Fetching';\n\nclass App extends React.Component {\n  // state = {\n  //     tasks: [],\n  //     fetching: true\n  // }\n  // onToggleCompleted = (taskId) => {\n  //     let taskToUpdate = this.state.tasks.find(task => task.id === taskId)\n  //     taskToUpdate.completed = !taskToUpdate.completed\n  //     this.setState(prevState => {\n  //         prevState.tasks.map(task => {\n  //             return task.id === taskId ? taskToUpdate : task\n  //         })\n  //     })\n  // }\n  // onAddTask = (newTaskName)=>{\n  //     let newTask = {\n  //         id: uniqueid(),\n  //         name: newTaskName,\n  //         completed:false\n  //     }\n  //     this.setState(prevState =>({\n  //         tasks:[...prevState.tasks, newTask]\n  //     }) )\n  // }\n  // onDeleteCompleted = () => {\n  //    this.setState(prevState => {\n  //        let newState = prevState.tasks.filter(task => !task.completed)\n  //        return {\n  //            tasks: newState\n  //        }\n  //    }) \n  // }\n  // componentDidMount = ()=>{\n  //     let delay = Math.floor(Math.random() * 5000)\n  //     setTimeout(()=>{\n  //         this.setState({\n  //             fetching:false,\n  //             tasks: initialData\n  //         })\n  //     },delay)\n  // }\n  // shouldComponentUpdate = () =>{\n  //     console.log('Bonjour de shouldComponentUpdate')\n  //     return true;\n  // }\n  // componentDidMount = () => {\n  //     console.log('Bonjour de componentDidMount')\n  // }\n  // componentDidUpdate = () => {\n  //     console.log('Bonjour de componentDidUpdate')\n  // }\n  // getSnapshotBeforeUpdate = () => {\n  //     console.log('Bonjour de getSnapshotBeforeUpdate')\n  // }\n  render() {\n    return React.createElement(\"section\", {\n      id: \"todo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(BrowserRouter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/add-task\",\n      component: AddTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/:filter?\",\n      component: ToDoList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(NavBar, {\n      onDeleteCompleted: this.onDeleteCompleted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["E:\\REACT_LINKEDIN\\exo\\to-do-list\\src\\components\\App.js"],"names":["React","NavBar","ToDoList","AddTask","BrowserRouter","Switch","Route","initialData","uniqueid","Fetching","App","Component","render","onDeleteCompleted"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,aAAR,EAAuBC,MAAvB,EAA+BC,KAA/B,QAA2C,kBAA3C;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAGA,MAAMC,GAAN,SAAkBV,KAAK,CAACW,SAAxB,CAAiC;AAC7B;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACAC,EAAAA,MAAM,GAAE;AAGJ,WACI;AAAS,MAAA,EAAE,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,WAAZ;AAAwB,MAAA,SAAS,EAAET,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAII,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,WAAZ;AAAwB,MAAA,SAAS,EAAED,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ,EAOI,oBAAC,MAAD;AAAQ,MAAA,iBAAiB,EAAE,KAAKW,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CAFJ,CADJ;AAcH;;AAjF4B;;AAoFjC,eAAeH,GAAf","sourcesContent":["import React from 'react'\nimport NavBar from './NavBar'\nimport ToDoList from './ToDoList'\nimport AddTask from './AddTask'\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport initialData from '../initialData'\nimport uniqueid from 'uniqueid'\nimport Fetching from './Fetching'\n\n\nclass App extends React.Component{\n    // state = {\n    //     tasks: [],\n    //     fetching: true\n    // }\n\n    // onToggleCompleted = (taskId) => {\n    //     let taskToUpdate = this.state.tasks.find(task => task.id === taskId)\n    //     taskToUpdate.completed = !taskToUpdate.completed\n        \n    //     this.setState(prevState => {\n    //         prevState.tasks.map(task => {\n    //             return task.id === taskId ? taskToUpdate : task\n    //         })\n    //     })\n    // }\n\n    // onAddTask = (newTaskName)=>{\n    //     let newTask = {\n    //         id: uniqueid(),\n    //         name: newTaskName,\n    //         completed:false\n    //     }\n\n    //     this.setState(prevState =>({\n    //         tasks:[...prevState.tasks, newTask]\n    //     }) )\n\n    // }\n\n    // onDeleteCompleted = () => {\n    //    this.setState(prevState => {\n    //        let newState = prevState.tasks.filter(task => !task.completed)\n    //        return {\n    //            tasks: newState\n    //        }\n    //    }) \n    // }\n\n    // componentDidMount = ()=>{\n    //     let delay = Math.floor(Math.random() * 5000)\n    //     setTimeout(()=>{\n    //         this.setState({\n    //             fetching:false,\n    //             tasks: initialData\n    //         })\n    //     },delay)\n    // }\n    // shouldComponentUpdate = () =>{\n    //     console.log('Bonjour de shouldComponentUpdate')\n    //     return true;\n    // }\n\n    // componentDidMount = () => {\n    //     console.log('Bonjour de componentDidMount')\n    // }\n\n    // componentDidUpdate = () => {\n    //     console.log('Bonjour de componentDidUpdate')\n    // }\n\n    // getSnapshotBeforeUpdate = () => {\n    //     console.log('Bonjour de getSnapshotBeforeUpdate')\n    // }\n    render(){\n\n      \n        return(\n            <section id=\"todo\">\n                  {/* {this.state.fetching? <Fetching/>: null} */}\n                <BrowserRouter>\n                    <Switch>\n                        {/* <Route path=\"/add-task\" render={(props) => <AddTask {...props} onAddTask={this.onAddTask}/>} /> */}\n                        <Route path=\"/add-task\" component={AddTask}/>\n                        {/* <Route path=\"/:filter?\" render={(props) => <ToDoList {...props} tasks={this.state.tasks} onToggleCompleted={this.onToggleCompleted}/>} /> */}\n                        <Route path=\"/:filter?\" component={ToDoList}/>\n                    </Switch>\n                    <NavBar onDeleteCompleted={this.onDeleteCompleted}/>\n                </BrowserRouter>\n            </section>\n        )\n    }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}